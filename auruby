#!/usr/bin/env ruby

require 'yaml'
require 'set'
require 'optparse'
require 'httparty'
require 'shellwords'
require 'fileutils'

# STRING COLORS
class String
  def colorize(code1, code2)
    "\e[#{code1}m#{self}\e[#{code2}m"
  end

  def red
    colorize(31, 0)
  end

  def green
    colorize(32, 0)
  end

  def yellow
    colorize(33, 0)
  end

  def blue
    colorize(34, 0)
  end

  def magenta
    colorize(35, 0)
  end

  def grey
    colorize(37, 0)
  end

  def bold
    colorize(1, 22)
  end
end

# This module will handle all configuration logic.
module AurubyConfig
  DEFAULTS = {
    'max_results' => 10,
    'number_cores' => `nproc`.to_i
  }.freeze

  # This reads the YAML file and merges it with defaults.
  def self.load_settings(path)
    user_config = File.file?(path) ? YAML.load_file(path) : {}

    if user_config.any?
      puts "==> ".grey + "Config loaded from #{path}".grey
    else
      puts "==> ".yellow + "Config file not found or empty, using defaults.".yellow
    end

    # User settings override defaults.
    DEFAULTS.merge(user_config || {})
  end
end

# --- Main script setup ---
home = ENV['HOME']
config_file = File.join(home, '.config', 'auruby', 'config.yml')
@cache_dir = File.join(home, '.cache', 'auruby')

# Load all settings into a single, accessible constant.
SETTINGS = AurubyConfig.load_settings(config_file)

@completed_installs = Set.new
@install_stack = []

FileUtils.mkdir_p(@cache_dir)

options = {
  force: false,
  download_only: false,
  noconfirm: false,
  upgrade: false,
  clean_cache: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: auruby [options] <search-term>"

  opts.on("-f", "--force", "Force re-downloading of cached packages") { |f| options[:force] = f }
  opts.on("-d", "--download-only", "Download source files only, do not build") { |d| options[:download_only] = d }
  opts.on("-y", "--yes", "--noconfirm", "Assume 'yes' to all prompts") { |y| options[:noconfirm] = y }
  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
  opts.on("-u", "--upgrade", "Check for and install updates for all AUR packages") { |u| options[:upgrade] = u }
  opts.on("-c", "--clean-cache", "Remove cached sources for uninstalled packages") { |c| options[:clean_cache] = c }
end.parse!

def strip_version_constraints(dep)
  dep.split(/[<>=]/).first
end

def pkg_in_official_repos?(pkg_name)
  system("pacman -Ssq ^#{Shellwords.escape(pkg_name)}$ > /dev/null 2>&1")
end

def prepare_cache(pkg_name, options)
  if options[:force]
    puts "==> ".yellow.bold + "'--force' specified, cleaning cache for '#{pkg_name}'...".bold
    clean_cache(pkg_name)
  end
end

# This function is now more robust against network errors.
def query(search_term)
  base_uri = 'https://aur.archlinux.org/rpc/v5'
  search_url = "#{base_uri}/search/#{search_term}"

  begin
    response = HTTParty.get(search_url, headers: {'Accept' => 'application/json'})
  rescue SocketError, Net::OpenTimeout, Net::ReadTimeout, Errno::ECONNREFUSED => e
    abort "==> ".red.bold + "ERROR: Could not connect to the AUR.".red + "\n    Check your internet connection. (Error: #{e.class})"
  end

  abort "==> ".red.bold + "ERROR: Failed to fetch data from AUR (HTTP #{response.code})." unless response.success?
  return response.parsed_response['results']
end

def wrap_text(text, num_columns, indent)
  available_width = num_columns - indent
  words = text.split(' ')
  lines = []
  current_line = " " * indent
  words.each do |word|
    if word.length > available_width
      unless current_line.strip.empty?
        lines << current_line.rstrip
        current_line = " " * indent
      end
      remaining_word = word
      while remaining_word.length > available_width
        lines << (" " * indent) + remaining_word.slice!(0, available_width)
      end
      current_line << remaining_word + " "
    elsif current_line.length + word.length + 1 > num_columns
      lines << current_line.rstrip
      current_line = " " * indent + word + " "
    else
      current_line << word + " "
    end
  end
  lines << current_line.rstrip unless current_line.strip.empty?
  lines.join("\n")
end

def exact_match(all_packages, search_term)
  all_packages.each do |package|
    name = package["Name"]
    return name if name.downcase == search_term.downcase
  end
  return nil
end

def no_results?(results)
  abort 'No results found' if results.empty?
end

def cache_exists?(name)
  File.directory?(File.join(@cache_dir, name, '.git'))
end

def clean_cache(name)
  path = File.join(@cache_dir, name)
  FileUtils.rm_rf(path) if Dir.exist?(path)
end

def clone_aur(name)
  aur_base = 'https://aur.archlinux.org/'
  success = Dir.chdir(@cache_dir) do
    system("git", "clone", "#{aur_base}/#{name}.git", name)
  end
  abort "==> ".red.bold + "ERROR: Failed to clone git repo for '#{name}'.".red unless success
end

def parse_pkgbuild_vars(name)
  path = File.join(@cache_dir, name)
  build_file = File.join(path, 'PKGBUILD')
  abort "PKGBUILD not found for '#{name}'".bold unless File.file?(build_file)

  begin
    command = "cd #{Shellwords.escape(path)} && source PKGBUILD >/dev/null 2>&1 && " \
              "echo \"__PKGNAMES__${pkgname[@]}\" && " \
              "echo \"__DEPS__${depends[@]}\" && " \
              "echo \"__MAKEDEPS__${makedepends[@]}\""
    output = `bash -c #{Shellwords.escape(command)}`
    pknames = output.match(/__PKGNAMES__(.*)/)&.captures&.first&.split || []
    deps = output.match(/__DEPS__(.*)/)&.captures&.first&.split || []
    makedeps = output.match(/__MAKEDEPS__(.*)/)&.captures&.first&.split || []
    return pknames, deps, makedeps
  rescue
    abort "Failed to parse PKGBUILD for '#{name}'".red.bold
  end
end

def makepkg(name, options)
  path = File.join(@cache_dir, name)
  env = { "MAKEFLAGS" => "-j#{SETTINGS['number_cores']}" }
  makepkg_cmd = "/usr/bin/makepkg -si"
  makepkg_cmd += ' --noconfirm' if options[:noconfirm]
  Dir.chdir(path) do
    return system(env, makepkg_cmd)
  end
end

def confirm?(options)
  negative_answers = ['n', 'no']
  ans = 'yes'
  ans = $stdin.gets.chomp.downcase unless options[:noconfirm]
  !negative_answers.include?(ans)
end

def pkg_operation(options)
  value = "Install".bold
  value = "Download only".bold if options[:download_only]
  return value
end

def inform_split_pkgs(pkg_names)
  if pkg_names.length > 1
    puts "==> ".green.bold + "NOTE:".bold + " This is a split package.".yellow
    puts "    The following packages were installed:".yellow
    pkg_names.each do |pkg_name|
      puts "    - #{pkg_name}".bold
    end
  end
end

def sanitize_version(version_str)
  return nil unless version_str

  cleaned = version_str.split('+').first
  cleaned.sub!(/^r/, '')
  cleaned = cleaned.sub(/-\d+$/, '')
  cleaned.sub!(/^v/, '')

  return nil unless cleaned.match?(/^\d/)
  cleaned
end

def get_directory_size(path)
  Dir.glob(File.join(path, '**', '*')).sum do |file|
    File.file?(file) ? File.size(file) : 0
  end
end

def format_bytes(bytes)
  return '0 Bytes' if bytes.zero?
  units = %w{Bytes KB MB GB TB}
  exp = (Math.log(bytes) / Math.log(1024)).to_i
  "%.2f %s" % [(bytes.to_f / 1024 ** exp), units[exp]]
end

def perform_clean_cache(options)
  puts "==> ".blue.bold + "Checking for unused cache directories..."

  cached_pkgs = Dir.glob(File.join(@cache_dir, '*')).select do |entry|
    File.directory?(entry)
  end.map do |path|
    File.basename(path)
  end

  if cached_pkgs.empty?
    puts "==> ".green.bold + "Cache is already empty."
    return
  end

  installed_pkgs = `pacman -Qmq`.split("\n")
  installed_set = Set.new(installed_pkgs)

  dirs_to_delete = cached_pkgs.select do |pkg|
    !installed_set.include?(pkg)
  end

  if dirs_to_delete.empty?
    puts "==> ".green.bold + "Cache is clean. No unused directories found."
    return
  end

  total_size_to_reclaim = 0
  dirs_to_delete.each do |dir_name|
    path = File.join(@cache_dir, dir_name)
    total_size_to_reclaim += get_directory_size(path)
  end
  formatted_size = format_bytes(total_size_to_reclaim)

  puts "\n==> ".blue.bold + "The following unused cache directories will be deleted:"
  puts dirs_to_delete.map { |d| "  - #{d}".yellow }.join("\n")
  puts "\n    Total space to be reclaimed: ".bold + formatted_size.green.bold
  puts "    Proceed with cleanup? (Y/n)".bold

  if confirm?(options)
    dirs_to_delete.each do |dir_name|
      puts " -> Removing #{dir_name}...".grey
      clean_cache(dir_name)
    end
    puts "\n==> ".green.bold + "Cache cleanup complete. Reclaimed #{formatted_size}.".green
  else
    puts "Cleanup cancelled by user.".yellow
  end
end

def perform_upgrade(options)
  puts "==> ".blue.bold + "Checking for AUR package updates..."

  begin
    installed_pkgs = `pacman -Qmq`.split("\n")
    if installed_pkgs.empty?
        puts "==> ".green.bold + "No AUR packages found."
        return
    end
  rescue
    abort "==> ".red.bold + "ERROR: Could not get list of installed packages. Is pacman working?"
  end

  upgrades_available = []

  installed_pkgs.each do |pkg_name|
    print " -> Checking #{pkg_name}..."

    local_info = `pacman -Qi #{pkg_name}`
    next if local_info.empty?
    local_version_str = local_info.match(/^Version\s+:\s+(.*)$/)&.captures&.first
    next unless local_version_str

    aur_results = query(pkg_name)
    next if aur_results.empty?

    exact_match_pkg = aur_results.find { |pkg| pkg['Name'].casecmp(pkg_name) == 0 }

    unless exact_match_pkg
      puts " Package not found in AUR, may have been renamed or deleted.".yellow
      next
    end

    remote_version_str = exact_match_pkg['Version']
    next unless remote_version_str

    clean_remote_v = sanitize_version(remote_version_str)
    clean_local_v = sanitize_version(local_version_str)

    if clean_remote_v && clean_local_v
      if Gem::Version.new(clean_remote_v) > Gem::Version.new(clean_local_v)
        puts " Update available: ".green + "#{local_version_str} -> ".yellow + remote_version_str.green.bold
        upgrades_available << pkg_name
      else
        puts " Up to date.".grey
      end
    else
      puts " Non-standard version, cannot auto-compare.".yellow
      puts "       Local:  #{local_version_str}".yellow
      puts "       AUR:    #{remote_version_str}".yellow
      puts "       To update, you can run: ".grey + "auruby #{pkg_name} --force".bold.grey
    end
  end

  if upgrades_available.any?
    puts "\n==> ".blue.bold + "The following packages have updates available:"
    puts upgrades_available.map { |p| "  - #{p}".yellow }.join("\n")
    puts "\n    Proceed with installation? (Y/n)".bold

    if confirm?(options)
      puts "\n==> Preparing to upgrade. Cleaning caches for a fresh build..."
      upgrades_available.each do |pkg_name|
        clean_cache(pkg_name)
      end
      @completed_installs.clear

      upgrades_available.each do |pkg_to_upgrade|
        install_protocol(pkg_to_upgrade, options)
      end
    else
      puts "Upgrade cancelled by user.".yellow
    end
  else
    puts "\n==> ".green.bold + "All AUR packages are up to date."
  end
end

def install_protocol(name, options)
  if @completed_installs.include?(name)
    puts "==> ".grey.bold + "Skipping '#{name}', already handled.".bold
    return true
  end

  if @install_stack.include?(name)
    puts "==> ".red.bold + "Error: Circular dependency detected!".bold
    puts "    Install stack: #{@install_stack.join(' -> ')} -> #{name}".red
    exit 1
  end
  @install_stack.push(name)

  puts "\n==> ".blue.bold + "Processing package: ".bold + name.yellow.bold

  unless cache_exists?(name)
    puts "    Cloning AUR repository for '#{name}'...".grey
    clone_aur(name)
  end

  puts "    Checking dependencies...".grey
  pkg_names, depends, makedepends = parse_pkgbuild_vars(name)
  all_deps = (depends + makedepends).uniq

  all_deps.each do |dep|
    dep_name = strip_version_constraints(dep)
    if pkg_in_official_repos?(dep_name)
      next
    elsif @completed_installs.include?(dep_name)
      next
    else
      puts "    Found AUR dependency: ".yellow + dep_name.bold + ". Starting recursive install...".yellow
      install_protocol(dep_name, options)
    end
  end

  if options[:download_only]
    puts "    '--download-only' specified. Skipping build for '#{name}'.".yellow
    @install_stack.pop
    return
  end

  puts "==> ".green.bold + "Dependencies for '#{name}' satisfied.".bold
  puts "    Proceed to build and install '#{name}'? (Y/n)".bold

  success = false
  if confirm?(options)
    success = makepkg(name, options)
    if success
      puts "==> ".green.bold + "Successfully built and installed '#{name}'.".bold
      inform_split_pkgs(pkg_names)
      @completed_installs.add(name)
    else
      puts "==> ".red.bold + "Failed to build '#{name}'. Please check the output above.".bold
    end
  else
    puts "    Build for '#{name}' skipped by user.".yellow
  end

  @install_stack.pop
  return success
end

def display_page(results, offset, limit, number_cols)
  page_results = results.slice(offset, limit)
  return 0 if page_results.nil? || page_results.empty?

  page_results.each_with_index do |pkg, i|
    actual_index = offset + i
    name = pkg['Name'].yellow.bold
    desc = pkg['Description'] || '(No description provided)'
    pop = pkg['Popularity'].round(3).to_s.green.bold
    votes = pkg['NumVotes'].to_s.green.bold
    index = "[#{(actual_index + 1)}]".magenta.bold
    indent = (actual_index + 1).digits.length + 3
    desc = wrap_text(desc, number_cols, indent)

    puts "#{index} #{name} (#{pop}/#{votes})"
    puts desc
  end

  return page_results.length
end

def present_search_results(sorted_results, number_cols)
  offset = 0
  limit = SETTINGS['max_results']
  total_results = sorted_results.length
  page_mode = true # Start in paged mode

  loop do
    system("clear") if offset > 0 && page_mode

    # Display the actual list of packages first
    if page_mode
      display_page(sorted_results, offset, limit, number_cols)
    else # Show all mode
      display_page(sorted_results, 0, total_results, number_cols)
    end
    
    # Now, build and display the summary and prompt together at the bottom
    summary_line = "==> Found #{total_results} packages. "
    if page_mode
      summary_line += "Showing results #{offset + 1}-#{[offset + limit, total_results].min}:"
    else
      summary_line += "Showing all results."
    end
    puts "\n" + summary_line

    prompt_parts = ["Choose a package number"]
    has_more = (offset + limit) < total_results

    if page_mode && has_more
      prompt_parts << "(m)ore"
      prompt_parts << "(s)how all"
    end
    prompt_parts << "(a)bort"

    puts "==> #{prompt_parts.join(', ')}".bold
    ans = $stdin.gets.chomp.downcase

    case ans
    when /^\d+$/
      index = ans.to_i - 1
      if index >= 0 && index < total_results
        return sorted_results[index]['Name'] # Return the chosen package name
      else
        puts "Invalid selection.".red
        sleep(1)
      end
    when 's'
      if page_mode && has_more
        page_mode = false
        system("clear")
      end
    when 'm'
      if page_mode && has_more
        offset += limit
      end
    else
      return nil # Abort
    end
  end
end

### MAIN EXECUTION BLOCK ###

if options[:upgrade]
  perform_upgrade(options)
elsif options[:clean_cache]
  perform_clean_cache(options)
elsif !ARGV.empty?
  package_names = ARGV
  number_cols = `tput cols`.to_i
  final_install_list = []

  package_names.each do |pkg_name|
    puts "==> ".magenta.bold + "Resolving package: #{pkg_name}".bold
    results = query(pkg_name)
    no_results?(results)
    exact_name = exact_match(results, pkg_name)

    if exact_name
      puts "    Found exact match: #{exact_name}".green
      final_install_list << exact_name
      prepare_cache(exact_name, options)
    else
      # Call the new interactive menu function
      sorted_results = results.sort { |a, b| b['Popularity'] <=> a['Popularity'] }
      chosen_name = present_search_results(sorted_results, number_cols)

      if chosen_name
        final_install_list << chosen_name
        prepare_cache(chosen_name, options)
      else
        puts "Skipping '#{pkg_name}'...".yellow
      end
    end
    puts ""
  end

  unless final_install_list.empty?
    puts "\n==> ".blue.bold + "Starting installation process for: #{final_install_list.uniq.join(', ')}".bold
    @completed_installs.clear if options[:force]
    final_install_list.uniq.each do |pkg_to_install|
      install_protocol(pkg_to_install, options)
    end
  end

else
  puts "Usage: auruby [options] <package_name> [package_name2]..."
  puts "   or: auruby --upgrade"
  puts "   or: auruby --clean-cache"
  exit 1
end

puts "\n==> ".green.bold + "auruby finished.".bold
